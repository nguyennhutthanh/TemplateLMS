{"ast":null,"code":"/**\n * SimpleBar.js - v5.3.8\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\nimport throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport memoize from 'lodash.memoize';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport canUseDOM from 'can-use-dom';\n\nfunction getElementWindow(element) {\n  if (!element || !element.ownerDocument || !element.ownerDocument.defaultView) {\n    return window;\n  }\n\n  return element.ownerDocument.defaultView;\n}\n\nfunction getElementDocument(element) {\n  if (!element || !element.ownerDocument) {\n    return document;\n  }\n\n  return element.ownerDocument;\n}\n\nvar cachedScrollbarWidth = null;\nvar cachedDevicePixelRatio = null;\n\nif (canUseDOM) {\n  window.addEventListener('resize', function () {\n    if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n      cachedDevicePixelRatio = window.devicePixelRatio;\n      cachedScrollbarWidth = null;\n    }\n  });\n}\n\nfunction scrollbarWidth(el) {\n  if (cachedScrollbarWidth === null) {\n    var document = getElementDocument(el);\n\n    if (typeof document === 'undefined') {\n      cachedScrollbarWidth = 0;\n      return cachedScrollbarWidth;\n    }\n\n    var body = document.body;\n    var box = document.createElement('div');\n    box.classList.add('simplebar-hide-scrollbar');\n    body.appendChild(box);\n    var width = box.getBoundingClientRect().right;\n    body.removeChild(box);\n    cachedScrollbarWidth = width;\n  }\n\n  return cachedScrollbarWidth;\n}\n\nvar SimpleBar = /*#__PURE__*/function () {\n  function SimpleBar(element, options) {\n    var _this = this;\n\n    this.onScroll = function () {\n      var elWindow = getElementWindow(_this.el);\n\n      if (!_this.scrollXTicking) {\n        elWindow.requestAnimationFrame(_this.scrollX);\n        _this.scrollXTicking = true;\n      }\n\n      if (!_this.scrollYTicking) {\n        elWindow.requestAnimationFrame(_this.scrollY);\n        _this.scrollYTicking = true;\n      }\n    };\n\n    this.scrollX = function () {\n      if (_this.axis.x.isOverflowing) {\n        _this.showScrollbar('x');\n\n        _this.positionScrollbar('x');\n      }\n\n      _this.scrollXTicking = false;\n    };\n\n    this.scrollY = function () {\n      if (_this.axis.y.isOverflowing) {\n        _this.showScrollbar('y');\n\n        _this.positionScrollbar('y');\n      }\n\n      _this.scrollYTicking = false;\n    };\n\n    this.onMouseEnter = function () {\n      _this.showScrollbar('x');\n\n      _this.showScrollbar('y');\n    };\n\n    this.onMouseMove = function (e) {\n      _this.mouseX = e.clientX;\n      _this.mouseY = e.clientY;\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        _this.onMouseMoveForAxis('x');\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        _this.onMouseMoveForAxis('y');\n      }\n    };\n\n    this.onMouseLeave = function () {\n      _this.onMouseMove.cancel();\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        _this.onMouseLeaveForAxis('x');\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        _this.onMouseLeaveForAxis('y');\n      }\n\n      _this.mouseX = -1;\n      _this.mouseY = -1;\n    };\n\n    this.onWindowResize = function () {\n      // Recalculate scrollbarWidth in case it's a zoom\n      _this.scrollbarWidth = _this.getScrollbarWidth();\n\n      _this.hideNativeScrollbar();\n    };\n\n    this.hideScrollbars = function () {\n      _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n      _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n      if (!_this.isWithinBounds(_this.axis.y.track.rect)) {\n        _this.axis.y.scrollbar.el.classList.remove(_this.classNames.visible);\n\n        _this.axis.y.isVisible = false;\n      }\n\n      if (!_this.isWithinBounds(_this.axis.x.track.rect)) {\n        _this.axis.x.scrollbar.el.classList.remove(_this.classNames.visible);\n\n        _this.axis.x.isVisible = false;\n      }\n    };\n\n    this.onPointerEvent = function (e) {\n      var isWithinTrackXBounds, isWithinTrackYBounds;\n      _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n      _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);\n      } // If any pointer event is called on the scrollbar\n\n\n      if (isWithinTrackXBounds || isWithinTrackYBounds) {\n        // Preventing the event's default action stops text being\n        // selectable during the drag.\n        e.preventDefault(); // Prevent event leaking\n\n        e.stopPropagation();\n\n        if (e.type === 'mousedown') {\n          if (isWithinTrackXBounds) {\n            _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();\n\n            if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {\n              _this.onDragStart(e, 'x');\n            } else {\n              _this.onTrackClick(e, 'x');\n            }\n          }\n\n          if (isWithinTrackYBounds) {\n            _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();\n\n            if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {\n              _this.onDragStart(e, 'y');\n            } else {\n              _this.onTrackClick(e, 'y');\n            }\n          }\n        }\n      }\n    };\n\n    this.drag = function (e) {\n      var eventOffset;\n      var track = _this.axis[_this.draggedAxis].track;\n      var trackSize = track.rect[_this.axis[_this.draggedAxis].sizeAttr];\n      var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\n      var contentSize = _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollSizeAttr];\n      var hostSize = parseInt(_this.elStyles[_this.axis[_this.draggedAxis].sizeAttr], 10);\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (_this.draggedAxis === 'y') {\n        eventOffset = e.pageY;\n      } else {\n        eventOffset = e.pageX;\n      } // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n\n\n      var dragPos = eventOffset - track.rect[_this.axis[_this.draggedAxis].offsetAttr] - _this.axis[_this.draggedAxis].dragOffset; // Convert the mouse position into a percentage of the scrollbar height/width.\n\n      var dragPerc = dragPos / (trackSize - scrollbar.size); // Scroll the content by the same percentage.\n\n      var scrollPos = dragPerc * (contentSize - hostSize); // Fix browsers inconsistency on RTL\n\n      if (_this.draggedAxis === 'x') {\n        scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? scrollPos - (trackSize + scrollbar.size) : scrollPos;\n        scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollPos : scrollPos;\n      }\n\n      _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] = scrollPos;\n    };\n\n    this.onEndDrag = function (e) {\n      var elDocument = getElementDocument(_this.el);\n      var elWindow = getElementWindow(_this.el);\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.el.classList.remove(_this.classNames.dragging);\n\n      elDocument.removeEventListener('mousemove', _this.drag, true);\n      elDocument.removeEventListener('mouseup', _this.onEndDrag, true);\n      _this.removePreventClickId = elWindow.setTimeout(function () {\n        // Remove these asynchronously so we still suppress click events\n        // generated simultaneously with mouseup.\n        elDocument.removeEventListener('click', _this.preventClick, true);\n        elDocument.removeEventListener('dblclick', _this.preventClick, true);\n        _this.removePreventClickId = null;\n      });\n    };\n\n    this.preventClick = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    this.el = element;\n    this.minScrollbarWidth = 20;\n    this.options = Object.assign({}, SimpleBar.defaultOptions, options);\n    this.classNames = Object.assign({}, SimpleBar.defaultOptions.classNames, this.options.classNames);\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetSizeAttr: 'offsetWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetSizeAttr: 'offsetHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null; // Don't re-instantiate over an existing one\n\n    if (SimpleBar.instances.has(this.el)) {\n      return;\n    }\n\n    this.recalculate = throttle(this.recalculate.bind(this), 64);\n    this.onMouseMove = throttle(this.onMouseMove.bind(this), 64);\n    this.hideScrollbars = debounce(this.hideScrollbars.bind(this), this.options.timeout);\n    this.onWindowResize = debounce(this.onWindowResize.bind(this), 64, {\n      leading: true\n    });\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n    this.init();\n  }\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n\n\n  SimpleBar.getRtlHelpers = function getRtlHelpers() {\n    var dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML = '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n    var scrollbarDummyEl = dummyDiv.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    var dummyContainerChild = scrollbarDummyEl.firstElementChild;\n    scrollbarDummyEl.scrollLeft = 0;\n    var dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    var dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n    scrollbarDummyEl.scrollLeft = 999;\n    var dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(dummyContainerChild);\n    return {\n      // determines if the scrolling is responding with negative values\n      isRtlScrollingInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left && dummyContainerChildOffset.left - dummyContainerScrollOffsetAfterScroll.left !== 0,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isRtlScrollbarInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left\n    };\n  };\n\n  SimpleBar.getOffset = function getOffset(el) {\n    var rect = el.getBoundingClientRect();\n    var elDocument = getElementDocument(el);\n    var elWindow = getElementWindow(el);\n    return {\n      top: rect.top + (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n      left: rect.left + (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n    };\n  };\n\n  var _proto = SimpleBar.prototype;\n\n  _proto.init = function init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    SimpleBar.instances.set(this.el, this); // We stop here on server-side\n\n    if (canUseDOM) {\n      this.initDOM();\n      this.setAccessibilityAttributes();\n      this.scrollbarWidth = this.getScrollbarWidth();\n      this.recalculate();\n      this.initListeners();\n    }\n  };\n\n  _proto.initDOM = function initDOM() {\n    var _this2 = this; // make sure this element doesn't have the elements yet\n\n\n    if (Array.prototype.filter.call(this.el.children, function (child) {\n      return child.classList.contains(_this2.classNames.wrapper);\n    }).length) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(\".\" + this.classNames.wrapper);\n      this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(\".\" + this.classNames.contentWrapper);\n      this.contentEl = this.options.contentNode || this.el.querySelector(\".\" + this.classNames.contentEl);\n      this.offsetEl = this.el.querySelector(\".\" + this.classNames.offset);\n      this.maskEl = this.el.querySelector(\".\" + this.classNames.mask);\n      this.placeholderEl = this.findChild(this.wrapperEl, \".\" + this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverEl);\n      this.axis.x.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.horizontal);\n      this.axis.y.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.vertical);\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      var track = document.createElement('div');\n      var scrollbar = document.createElement('div');\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n      track.appendChild(scrollbar);\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\".\" + this.classNames.scrollbar);\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\".\" + this.classNames.scrollbar);\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  };\n\n  _proto.setAccessibilityAttributes = function setAccessibilityAttributes() {\n    var ariaLabel = this.options.ariaLabel || 'scrollable content';\n    this.contentWrapperEl.setAttribute('tabindex', '0');\n    this.contentWrapperEl.setAttribute('role', 'region');\n    this.contentWrapperEl.setAttribute('aria-label', ariaLabel);\n  };\n\n  _proto.initListeners = function initListeners() {\n    var _this3 = this;\n\n    var elWindow = getElementWindow(this.el); // Event listeners\n\n    if (this.options.autoHide) {\n      this.el.addEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n      _this3.el.addEventListener(e, _this3.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n      _this3.el.addEventListener(e, _this3.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll); // Browser zoom triggers a window resize\n\n    elWindow.addEventListener('resize', this.onWindowResize); // Hack for https://github.com/WICG/ResizeObserver/issues/38\n\n    var resizeObserverStarted = false;\n    var resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n    this.resizeObserver = new resizeObserver(function () {\n      if (!resizeObserverStarted) return;\n\n      _this3.recalculate();\n    });\n    this.resizeObserver.observe(this.el);\n    this.resizeObserver.observe(this.contentEl);\n    elWindow.requestAnimationFrame(function () {\n      resizeObserverStarted = true;\n    }); // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n\n    this.mutationObserver = new elWindow.MutationObserver(this.recalculate);\n    this.mutationObserver.observe(this.contentEl, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  };\n\n  _proto.recalculate = function recalculate() {\n    var elWindow = getElementWindow(this.el);\n    this.elStyles = elWindow.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n    var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n    var contentElOffsetWidth = this.contentEl.offsetWidth;\n    var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n    var elOverflowX = this.elStyles.overflowX;\n    var elOverflowY = this.elStyles.overflowY;\n    this.contentEl.style.padding = this.elStyles.paddingTop + \" \" + this.elStyles.paddingRight + \" \" + this.elStyles.paddingBottom + \" \" + this.elStyles.paddingLeft;\n    this.wrapperEl.style.margin = \"-\" + this.elStyles.paddingTop + \" -\" + this.elStyles.paddingRight + \" -\" + this.elStyles.paddingBottom + \" -\" + this.elStyles.paddingLeft;\n    var contentElScrollHeight = this.contentEl.scrollHeight;\n    var contentElScrollWidth = this.contentEl.scrollWidth;\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%'; // Determine placeholder size\n\n    this.placeholderEl.style.width = isWidthAuto ? contentElOffsetWidth + \"px\" : 'auto';\n    this.placeholderEl.style.height = contentElScrollHeight + \"px\";\n    var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n    this.axis.x.isOverflowing = contentElScrollWidth > contentElOffsetWidth;\n    this.axis.y.isOverflowing = contentElScrollHeight > contentWrapperElOffsetHeight; // Set isOverflowing to false if user explicitely set hidden overflow\n\n    this.axis.x.isOverflowing = elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing = elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n    this.axis.x.forceVisible = this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible = this.options.forceVisible === 'y' || this.options.forceVisible === true;\n    this.hideNativeScrollbar(); // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n\n    var offsetForXScrollbar = this.axis.x.isOverflowing ? this.scrollbarWidth : 0;\n    var offsetForYScrollbar = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;\n    this.axis.x.isOverflowing = this.axis.x.isOverflowing && contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n    this.axis.y.isOverflowing = this.axis.y.isOverflowing && contentElScrollHeight > contentWrapperElOffsetHeight - offsetForXScrollbar;\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n    this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + \"px\";\n    this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + \"px\";\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n  /**\n   * Calculate scrollbar size\n   */\n  ;\n\n  _proto.getScrollbarSize = function getScrollbarSize(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    if (!this.axis[axis].isOverflowing) {\n      return 0;\n    }\n\n    var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n    var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    var scrollbarSize;\n    var scrollbarRatio = trackSize / contentSize; // Calculate new height/position of drag handle.\n\n    scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  };\n\n  _proto.positionScrollbar = function positionScrollbar(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    var scrollbar = this.axis[axis].scrollbar;\n    var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollOffset : scrollOffset;\n    var scrollPourcent = scrollOffset / (contentSize - hostSize);\n    var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? handleOffset + (trackSize - scrollbar.size) : handleOffset;\n    scrollbar.el.style.transform = axis === 'x' ? \"translate3d(\" + handleOffset + \"px, 0, 0)\" : \"translate3d(0, \" + handleOffset + \"px, 0)\";\n  };\n\n  _proto.toggleTrackVisibility = function toggleTrackVisibility(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var track = this.axis[axis].track.el;\n    var scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n    } // Even if forceVisible is enabled, scrollbar itself should be hidden\n\n\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  };\n\n  _proto.hideNativeScrollbar = function hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n    this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n  }\n  /**\n   * On scroll event handling\n   */\n  ;\n\n  _proto.onMouseMoveForAxis = function onMouseMoveForAxis(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    this.axis[axis].track.rect = this.axis[axis].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    var isWithinScrollbarBoundsX = this.isWithinBounds(this.axis[axis].scrollbar.rect);\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.showScrollbar(axis);\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  };\n\n  _proto.onMouseLeaveForAxis = function onMouseLeaveForAxis(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  };\n  /**\n   * Show scrollbar\n   */\n\n\n  _proto.showScrollbar = function showScrollbar(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var scrollbar = this.axis[axis].scrollbar.el;\n\n    if (!this.axis[axis].isVisible) {\n      scrollbar.classList.add(this.classNames.visible);\n      this.axis[axis].isVisible = true;\n    }\n\n    if (this.options.autoHide) {\n      this.hideScrollbars();\n    }\n  }\n  /**\n   * Hide Scrollbar\n   */\n  ;\n  /**\n   * on scrollbar handle drag movement starts\n   */\n\n\n  _proto.onDragStart = function onDragStart(e, axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var elDocument = getElementDocument(this.el);\n    var elWindow = getElementWindow(this.el);\n    var scrollbar = this.axis[axis].scrollbar; // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n\n    var eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset = eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n    this.el.classList.add(this.classNames.dragging);\n    elDocument.addEventListener('mousemove', this.drag, true);\n    elDocument.addEventListener('mouseup', this.onEndDrag, true);\n\n    if (this.removePreventClickId === null) {\n      elDocument.addEventListener('click', this.preventClick, true);\n      elDocument.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      elWindow.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n  /**\n   * Drag scrollbar handle\n   */\n  ;\n\n  _proto.onTrackClick = function onTrackClick(e, axis) {\n    var _this4 = this;\n\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    if (!this.options.clickOnTrack) return;\n    var elWindow = getElementWindow(this.el);\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    var scrollbar = this.axis[axis].scrollbar;\n    var scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n    var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    var t = axis === 'y' ? this.mouseY - scrollbarOffset : this.mouseX - scrollbarOffset;\n    var dir = t < 0 ? -1 : 1;\n    var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n\n    var scrollTo = function scrollTo() {\n      if (dir === -1) {\n        if (scrolled > scrollSize) {\n          var _this4$contentWrapper;\n\n          scrolled -= _this4.options.clickOnTrackSpeed;\n\n          _this4.contentWrapperEl.scrollTo((_this4$contentWrapper = {}, _this4$contentWrapper[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper));\n\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      } else {\n        if (scrolled < scrollSize) {\n          var _this4$contentWrapper2;\n\n          scrolled += _this4.options.clickOnTrackSpeed;\n\n          _this4.contentWrapperEl.scrollTo((_this4$contentWrapper2 = {}, _this4$contentWrapper2[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper2));\n\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      }\n    };\n\n    scrollTo();\n  }\n  /**\n   * Getter for content element\n   */\n  ;\n\n  _proto.getContentElement = function getContentElement() {\n    return this.contentEl;\n  }\n  /**\n   * Getter for original scrolling element\n   */\n  ;\n\n  _proto.getScrollElement = function getScrollElement() {\n    return this.contentWrapperEl;\n  };\n\n  _proto.getScrollbarWidth = function getScrollbarWidth() {\n    // Try/catch for FF 56 throwing on undefined computedStyles\n    try {\n      // Detect browsers supporting CSS scrollbar styling and do not calculate\n      if (getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar').display === 'none' || 'scrollbarWidth' in document.documentElement.style || '-ms-overflow-style' in document.documentElement.style) {\n        return 0;\n      } else {\n        return scrollbarWidth(this.el);\n      }\n    } catch (e) {\n      return scrollbarWidth(this.el);\n    }\n  };\n\n  _proto.removeListeners = function removeListeners() {\n    var _this5 = this;\n\n    var elWindow = getElementWindow(this.el); // Event listeners\n\n    if (this.options.autoHide) {\n      this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n      _this5.el.removeEventListener(e, _this5.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n      _this5.el.removeEventListener(e, _this5.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n\n    if (this.contentWrapperEl) {\n      this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    }\n\n    elWindow.removeEventListener('resize', this.onWindowResize);\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    } // Cancel all debounced functions\n\n\n    this.recalculate.cancel();\n    this.onMouseMove.cancel();\n    this.hideScrollbars.cancel();\n    this.onWindowResize.cancel();\n  }\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  ;\n\n  _proto.unMount = function unMount() {\n    this.removeListeners();\n    SimpleBar.instances.delete(this.el);\n  }\n  /**\n   * Check if mouse is within bounds\n   */\n  ;\n\n  _proto.isWithinBounds = function isWithinBounds(bbox) {\n    return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;\n  }\n  /**\n   * Find element children matches query\n   */\n  ;\n\n  _proto.findChild = function findChild(el, query) {\n    var matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, function (child) {\n      return matches.call(child, query);\n    })[0];\n  };\n\n  return SimpleBar;\n}();\n\nSimpleBar.defaultOptions = {\n  autoHide: true,\n  forceVisible: false,\n  clickOnTrack: true,\n  clickOnTrackSpeed: 40,\n  classNames: {\n    contentEl: 'simplebar-content',\n    contentWrapper: 'simplebar-content-wrapper',\n    offset: 'simplebar-offset',\n    mask: 'simplebar-mask',\n    wrapper: 'simplebar-wrapper',\n    placeholder: 'simplebar-placeholder',\n    scrollbar: 'simplebar-scrollbar',\n    track: 'simplebar-track',\n    heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n    heightAutoObserverEl: 'simplebar-height-auto-observer',\n    visible: 'simplebar-visible',\n    horizontal: 'simplebar-horizontal',\n    vertical: 'simplebar-vertical',\n    hover: 'simplebar-hover',\n    dragging: 'simplebar-dragging'\n  },\n  scrollbarMinSize: 25,\n  scrollbarMaxSize: 0,\n  timeout: 1000\n};\nSimpleBar.instances = new WeakMap();\nexport default SimpleBar;","map":{"version":3,"sources":["../src/helpers.js","../src/scrollbar-width.js","../src/simplebar.js"],"names":["element","cachedScrollbarWidth","cachedDevicePixelRatio","window","document","getElementDocument","body","box","width","SimpleBar","x","scrollOffsetAttr","sizeAttr","scrollSizeAttr","offsetSizeAttr","offsetAttr","overflowAttr","dragOffset","isOverflowing","isVisible","forceVisible","track","scrollbar","y","throttle","debounce","leading","memoize","getRtlHelpers","dummyDiv","scrollbarDummyEl","dummyContainerChild","dummyContainerOffset","dummyContainerChildOffset","dummyContainerScrollOffsetAfterScroll","isRtlScrollingInverted","isRtlScrollbarInverted","left","defaultOptions","autoHide","clickOnTrack","clickOnTrackSpeed","classNames","contentEl","contentWrapper","offset","mask","wrapper","placeholder","heightAutoObserverWrapperEl","heightAutoObserverEl","visible","horizontal","vertical","hover","dragging","scrollbarMinSize","scrollbarMaxSize","timeout","getOffset","rect","el","elDocument","elWindow","getElementWindow","top","instances","init","initDOM","child","setAccessibilityAttributes","ariaLabel","initListeners","capture","passive","resizeObserverStarted","resizeObserver","childList","subtree","characterData","recalculate","isHeightAuto","isWidthAuto","contentElOffsetWidth","contentWrapperElOffsetWidth","elOverflowX","elOverflowY","contentElScrollHeight","contentElScrollWidth","contentWrapperElOffsetHeight","offsetForXScrollbar","offsetForYScrollbar","getScrollbarSize","axis","contentSize","trackSize","scrollbarRatio","scrollbarSize","Math","positionScrollbar","hostSize","parseInt","scrollOffset","scrollPourcent","handleOffset","toggleTrackVisibility","hideNativeScrollbar","e","onMouseMoveForAxis","isWithinScrollbarBoundsX","onMouseLeaveForAxis","showScrollbar","isWithinTrackXBounds","isWithinTrackYBounds","onDragStart","eventOffset","dragPos","dragPerc","scrollPos","onTrackClick","scrollbarOffset","scrolled","t","dir","scrollSize","scrollTo","getContentElement","getScrollElement","getScrollbarWidth","getComputedStyle","scrollbarWidth","removeListeners","unMount","isWithinBounds","bbox","findChild","matches"],"mappings":"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","sourcesContent":["// Helper function to retrieve options from element attributes\nexport const getOptions = function(obj) {\n  const options = Array.prototype.reduce.call(\n    obj,\n    (acc, attribute) => {\n      const option = attribute.name.match(/data-simplebar-(.+)/);\n      if (option) {\n        const key = option[1].replace(/\\W+(.)/g, (x, chr) => chr.toUpperCase());\n        switch (attribute.value) {\n          case 'true':\n            acc[key] = true;\n            break;\n          case 'false':\n            acc[key] = false;\n            break;\n          case undefined:\n            acc[key] = true;\n            break;\n          default:\n            acc[key] = attribute.value;\n        }\n      }\n      return acc;\n    },\n    {}\n  );\n  return options;\n};\n\nexport function getElementWindow(element) {\n  if (\n    !element ||\n    !element.ownerDocument ||\n    !element.ownerDocument.defaultView\n  ) {\n    return window;\n  }\n  return element.ownerDocument.defaultView;\n}\n\nexport function getElementDocument(element) {\n  if (!element || !element.ownerDocument) {\n    return document;\n  }\n  return element.ownerDocument;\n}\n","import canUseDOM from 'can-use-dom';\nimport { getElementDocument } from \"./helpers\";\n\nlet cachedScrollbarWidth = null;\nlet cachedDevicePixelRatio = null;\n\nif (canUseDOM) {\n  window.addEventListener('resize', () => {\n    if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n      cachedDevicePixelRatio = window.devicePixelRatio;\n      cachedScrollbarWidth = null;\n    }\n  });\n}\n\nexport default function scrollbarWidth(el) {\n  if (cachedScrollbarWidth === null) {\n    \n    const document = getElementDocument(el);\n    \n    if (typeof document === 'undefined') {\n      cachedScrollbarWidth = 0;\n      return cachedScrollbarWidth;\n    }\n    const body = document.body;\n    const box = document.createElement('div');\n\n    box.classList.add('simplebar-hide-scrollbar');\n\n    body.appendChild(box);\n\n    const width = box.getBoundingClientRect().right;\n\n    body.removeChild(box);\n\n    cachedScrollbarWidth = width;\n  }\n\n  return cachedScrollbarWidth;\n}\n","import throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport memoize from 'lodash.memoize';\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport canUseDOM from 'can-use-dom';\nimport scrollbarWidth from './scrollbar-width';\nimport { getElementWindow, getElementDocument } from './helpers';\n\nexport default class SimpleBar {\n  constructor(element, options) {\n    this.el = element;\n    this.minScrollbarWidth = 20;\n    this.options = { ...SimpleBar.defaultOptions, ...options };\n    this.classNames = {\n      ...SimpleBar.defaultOptions.classNames,\n      ...this.options.classNames\n    };\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetSizeAttr: 'offsetWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetSizeAttr: 'offsetHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null;\n\n    // Don't re-instantiate over an existing one\n    if (SimpleBar.instances.has(this.el)) {\n      return;\n    }\n\n    this.recalculate = throttle(this.recalculate.bind(this), 64);\n    this.onMouseMove = throttle(this.onMouseMove.bind(this), 64);\n    this.hideScrollbars = debounce(\n      this.hideScrollbars.bind(this),\n      this.options.timeout\n    );\n    this.onWindowResize = debounce(this.onWindowResize.bind(this), 64, {\n      leading: true\n    });\n\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n\n    this.init();\n  }\n\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n  static getRtlHelpers() {\n    const dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML =\n      '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n    const scrollbarDummyEl = dummyDiv.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    const dummyContainerChild = scrollbarDummyEl.firstElementChild;\n    scrollbarDummyEl.scrollLeft = 0;\n    const dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    const dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n    scrollbarDummyEl.scrollLeft = 999;\n    const dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(\n      dummyContainerChild\n    );\n\n    return {\n      // determines if the scrolling is responding with negative values\n      isRtlScrollingInverted:\n        dummyContainerOffset.left !== dummyContainerChildOffset.left &&\n        dummyContainerChildOffset.left -\n          dummyContainerScrollOffsetAfterScroll.left !==\n          0,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isRtlScrollbarInverted:\n        dummyContainerOffset.left !== dummyContainerChildOffset.left\n    };\n  }\n\n  static defaultOptions = {\n    autoHide: true,\n    forceVisible: false,\n    clickOnTrack: true,\n    clickOnTrackSpeed: 40,\n    classNames: {\n      contentEl: 'simplebar-content',\n      contentWrapper: 'simplebar-content-wrapper',\n      offset: 'simplebar-offset',\n      mask: 'simplebar-mask',\n      wrapper: 'simplebar-wrapper',\n      placeholder: 'simplebar-placeholder',\n      scrollbar: 'simplebar-scrollbar',\n      track: 'simplebar-track',\n      heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n      heightAutoObserverEl: 'simplebar-height-auto-observer',\n      visible: 'simplebar-visible',\n      horizontal: 'simplebar-horizontal',\n      vertical: 'simplebar-vertical',\n      hover: 'simplebar-hover',\n      dragging: 'simplebar-dragging'\n    },\n    scrollbarMinSize: 25,\n    scrollbarMaxSize: 0,\n    timeout: 1000\n  };\n\n  static getOffset(el) {\n    const rect = el.getBoundingClientRect();\n    const elDocument = getElementDocument(el);\n    const elWindow = getElementWindow(el);\n\n    return {\n      top:\n        rect.top +\n        (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n      left:\n        rect.left +\n        (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n    };\n  }\n\n  static instances = new WeakMap();\n\n  init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    SimpleBar.instances.set(this.el, this);\n\n    // We stop here on server-side\n    if (canUseDOM) {\n      this.initDOM();\n\n      this.setAccessibilityAttributes();\n\n      this.scrollbarWidth = this.getScrollbarWidth();\n\n      this.recalculate();\n\n      this.initListeners();\n    }\n  }\n\n  initDOM() {\n    // make sure this element doesn't have the elements yet\n    if (\n      Array.prototype.filter.call(this.el.children, child =>\n        child.classList.contains(this.classNames.wrapper)\n      ).length\n    ) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(`.${this.classNames.wrapper}`);\n      this.contentWrapperEl =\n        this.options.scrollableNode ||\n        this.el.querySelector(`.${this.classNames.contentWrapper}`);\n      this.contentEl =\n        this.options.contentNode ||\n        this.el.querySelector(`.${this.classNames.contentEl}`);\n\n      this.offsetEl = this.el.querySelector(`.${this.classNames.offset}`);\n      this.maskEl = this.el.querySelector(`.${this.classNames.mask}`);\n\n      this.placeholderEl = this.findChild(\n        this.wrapperEl,\n        `.${this.classNames.placeholder}`\n      );\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverWrapperEl}`\n      );\n      this.heightAutoObserverEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverEl}`\n      );\n      this.axis.x.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.horizontal}`\n      );\n      this.axis.y.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.vertical}`\n      );\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(\n        this.classNames.heightAutoObserverWrapperEl\n      );\n      this.heightAutoObserverEl.classList.add(\n        this.classNames.heightAutoObserverEl\n      );\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      const track = document.createElement('div');\n      const scrollbar = document.createElement('div');\n\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n\n      track.appendChild(scrollbar);\n\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  }\n\n  setAccessibilityAttributes() {\n    const ariaLabel = this.options.ariaLabel || 'scrollable content';\n\n    this.contentWrapperEl.setAttribute('tabindex', '0');\n    this.contentWrapperEl.setAttribute('role', 'region');\n    this.contentWrapperEl.setAttribute('aria-label', ariaLabel);\n  }\n\n  initListeners() {\n    const elWindow = getElementWindow(this.el);\n    // Event listeners\n    if (this.options.autoHide) {\n      this.el.addEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll);\n\n    // Browser zoom triggers a window resize\n    elWindow.addEventListener('resize', this.onWindowResize);\n\n    // Hack for https://github.com/WICG/ResizeObserver/issues/38\n    let resizeObserverStarted = false;\n    const resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n    this.resizeObserver = new resizeObserver(() => {\n      if (!resizeObserverStarted) return;\n      this.recalculate();\n    });\n\n    this.resizeObserver.observe(this.el);\n    this.resizeObserver.observe(this.contentEl);\n\n    elWindow.requestAnimationFrame(() => {\n      resizeObserverStarted = true;\n    });\n\n    // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n    this.mutationObserver = new elWindow.MutationObserver(this.recalculate);\n\n    this.mutationObserver.observe(this.contentEl, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n\n  recalculate() {\n    const elWindow = getElementWindow(this.el);\n    this.elStyles = elWindow.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n\n    const isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    const isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n    const contentElOffsetWidth = this.contentEl.offsetWidth;\n\n    const contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n\n    const elOverflowX = this.elStyles.overflowX;\n    const elOverflowY = this.elStyles.overflowY;\n\n    this.contentEl.style.padding = `${this.elStyles.paddingTop} ${this.elStyles.paddingRight} ${this.elStyles.paddingBottom} ${this.elStyles.paddingLeft}`;\n    this.wrapperEl.style.margin = `-${this.elStyles.paddingTop} -${this.elStyles.paddingRight} -${this.elStyles.paddingBottom} -${this.elStyles.paddingLeft}`;\n\n    const contentElScrollHeight = this.contentEl.scrollHeight;\n    const contentElScrollWidth = this.contentEl.scrollWidth;\n\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%';\n\n    // Determine placeholder size\n    this.placeholderEl.style.width = isWidthAuto\n      ? `${contentElOffsetWidth}px`\n      : 'auto';\n    this.placeholderEl.style.height = `${contentElScrollHeight}px`;\n\n    const contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n\n    this.axis.x.isOverflowing = contentElScrollWidth > contentElOffsetWidth;\n    this.axis.y.isOverflowing =\n      contentElScrollHeight > contentWrapperElOffsetHeight;\n\n    // Set isOverflowing to false if user explicitely set hidden overflow\n    this.axis.x.isOverflowing =\n      elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing =\n      elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n\n    this.axis.x.forceVisible =\n      this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible =\n      this.options.forceVisible === 'y' || this.options.forceVisible === true;\n\n    this.hideNativeScrollbar();\n\n    // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n    let offsetForXScrollbar = this.axis.x.isOverflowing\n      ? this.scrollbarWidth\n      : 0;\n    let offsetForYScrollbar = this.axis.y.isOverflowing\n      ? this.scrollbarWidth\n      : 0;\n\n    this.axis.x.isOverflowing =\n      this.axis.x.isOverflowing &&\n      contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n    this.axis.y.isOverflowing =\n      this.axis.y.isOverflowing &&\n      contentElScrollHeight >\n        contentWrapperElOffsetHeight - offsetForXScrollbar;\n\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n\n    this.axis.x.scrollbar.el.style.width = `${this.axis.x.scrollbar.size}px`;\n    this.axis.y.scrollbar.el.style.height = `${this.axis.y.scrollbar.size}px`;\n\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n\n  /**\n   * Calculate scrollbar size\n   */\n  getScrollbarSize(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return 0;\n    }\n\n    const contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    let scrollbarSize;\n\n    let scrollbarRatio = trackSize / contentSize;\n\n    // Calculate new height/position of drag handle.\n    scrollbarSize = Math.max(\n      ~~(scrollbarRatio * trackSize),\n      this.options.scrollbarMinSize\n    );\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  }\n\n  positionScrollbar(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    const contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    let scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isRtlScrollingInverted\n        ? -scrollOffset\n        : scrollOffset;\n    let scrollPourcent = scrollOffset / (contentSize - hostSize);\n\n    let handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isRtlScrollbarInverted\n        ? handleOffset + (trackSize - scrollbar.size)\n        : handleOffset;\n\n    scrollbar.el.style.transform =\n      axis === 'x'\n        ? `translate3d(${handleOffset}px, 0, 0)`\n        : `translate3d(0, ${handleOffset}px, 0)`;\n  }\n\n  toggleTrackVisibility(axis = 'y') {\n    const track = this.axis[axis].track.el;\n    const scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n    }\n\n    // Even if forceVisible is enabled, scrollbar itself should be hidden\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  }\n\n  hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] =\n      this.axis.y.isOverflowing || this.axis.y.forceVisible\n        ? `-${this.scrollbarWidth}px`\n        : 0;\n    this.offsetEl.style.bottom =\n      this.axis.x.isOverflowing || this.axis.x.forceVisible\n        ? `-${this.scrollbarWidth}px`\n        : 0;\n  }\n\n  /**\n   * On scroll event handling\n   */\n  onScroll = () => {\n    const elWindow = getElementWindow(this.el);\n    if (!this.scrollXTicking) {\n      elWindow.requestAnimationFrame(this.scrollX);\n      this.scrollXTicking = true;\n    }\n\n    if (!this.scrollYTicking) {\n      elWindow.requestAnimationFrame(this.scrollY);\n      this.scrollYTicking = true;\n    }\n  };\n\n  scrollX = () => {\n    if (this.axis.x.isOverflowing) {\n      this.showScrollbar('x');\n      this.positionScrollbar('x');\n    }\n\n    this.scrollXTicking = false;\n  };\n\n  scrollY = () => {\n    if (this.axis.y.isOverflowing) {\n      this.showScrollbar('y');\n      this.positionScrollbar('y');\n    }\n\n    this.scrollYTicking = false;\n  };\n\n  onMouseEnter = () => {\n    this.showScrollbar('x');\n    this.showScrollbar('y');\n  };\n\n  onMouseMove = e => {\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseMoveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseMoveForAxis('y');\n    }\n  };\n\n  onMouseMoveForAxis(axis = 'y') {\n    this.axis[axis].track.rect = this.axis[\n      axis\n    ].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n\n    const isWithinScrollbarBoundsX = this.isWithinBounds(\n      this.axis[axis].scrollbar.rect\n    );\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.showScrollbar(axis);\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  }\n\n  onMouseLeave = () => {\n    this.onMouseMove.cancel();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseLeaveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseLeaveForAxis('y');\n    }\n\n    this.mouseX = -1;\n    this.mouseY = -1;\n  };\n\n  onMouseLeaveForAxis(axis = 'y') {\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  }\n\n  onWindowResize = () => {\n    // Recalculate scrollbarWidth in case it's a zoom\n    this.scrollbarWidth = this.getScrollbarWidth();\n\n    this.hideNativeScrollbar();\n  };\n\n  /**\n   * Show scrollbar\n   */\n  showScrollbar(axis = 'y') {\n    let scrollbar = this.axis[axis].scrollbar.el;\n\n    if (!this.axis[axis].isVisible) {\n      scrollbar.classList.add(this.classNames.visible);\n      this.axis[axis].isVisible = true;\n    }\n\n    if (this.options.autoHide) {\n      this.hideScrollbars();\n    }\n  }\n\n  /**\n   * Hide Scrollbar\n   */\n  hideScrollbars = () => {\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    if (!this.isWithinBounds(this.axis.y.track.rect)) {\n      this.axis.y.scrollbar.el.classList.remove(this.classNames.visible);\n      this.axis.y.isVisible = false;\n    }\n\n    if (!this.isWithinBounds(this.axis.x.track.rect)) {\n      this.axis.x.scrollbar.el.classList.remove(this.classNames.visible);\n      this.axis.x.isVisible = false;\n    }\n  };\n\n  onPointerEvent = e => {\n    let isWithinTrackXBounds, isWithinTrackYBounds;\n\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      isWithinTrackXBounds = this.isWithinBounds(this.axis.x.track.rect);\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      isWithinTrackYBounds = this.isWithinBounds(this.axis.y.track.rect);\n    }\n\n    // If any pointer event is called on the scrollbar\n    if (isWithinTrackXBounds || isWithinTrackYBounds) {\n      // Preventing the event's default action stops text being\n      // selectable during the drag.\n      e.preventDefault();\n      // Prevent event leaking\n      e.stopPropagation();\n\n      if (e.type === 'mousedown') {\n        if (isWithinTrackXBounds) {\n          this.axis.x.scrollbar.rect = this.axis.x.scrollbar.el.getBoundingClientRect();\n\n          if (this.isWithinBounds(this.axis.x.scrollbar.rect)) {\n            this.onDragStart(e, 'x');\n          } else {\n            this.onTrackClick(e, 'x');\n          }\n        }\n\n        if (isWithinTrackYBounds) {\n          this.axis.y.scrollbar.rect = this.axis.y.scrollbar.el.getBoundingClientRect();\n\n          if (this.isWithinBounds(this.axis.y.scrollbar.rect)) {\n            this.onDragStart(e, 'y');\n          } else {\n            this.onTrackClick(e, 'y');\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * on scrollbar handle drag movement starts\n   */\n  onDragStart(e, axis = 'y') {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n    const eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset =\n      eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n\n    this.el.classList.add(this.classNames.dragging);\n\n    elDocument.addEventListener('mousemove', this.drag, true);\n    elDocument.addEventListener('mouseup', this.onEndDrag, true);\n    if (this.removePreventClickId === null) {\n      elDocument.addEventListener('click', this.preventClick, true);\n      elDocument.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      elWindow.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n\n  /**\n   * Drag scrollbar handle\n   */\n  drag = e => {\n    let eventOffset;\n    const track = this.axis[this.draggedAxis].track;\n    const trackSize = track.rect[this.axis[this.draggedAxis].sizeAttr];\n    const scrollbar = this.axis[this.draggedAxis].scrollbar;\n    const contentSize = this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollSizeAttr\n    ];\n    const hostSize = parseInt(\n      this.elStyles[this.axis[this.draggedAxis].sizeAttr],\n      10\n    );\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (this.draggedAxis === 'y') {\n      eventOffset = e.pageY;\n    } else {\n      eventOffset = e.pageX;\n    }\n\n    // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n    let dragPos =\n      eventOffset -\n      track.rect[this.axis[this.draggedAxis].offsetAttr] -\n      this.axis[this.draggedAxis].dragOffset;\n    // Convert the mouse position into a percentage of the scrollbar height/width.\n    let dragPerc = dragPos / (trackSize - scrollbar.size);\n\n    // Scroll the content by the same percentage.\n    let scrollPos = dragPerc * (contentSize - hostSize);\n\n    // Fix browsers inconsistency on RTL\n    if (this.draggedAxis === 'x') {\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted\n          ? scrollPos - (trackSize + scrollbar.size)\n          : scrollPos;\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted\n          ? -scrollPos\n          : scrollPos;\n    }\n\n    this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollOffsetAttr\n    ] = scrollPos;\n  };\n\n  /**\n   * End scroll handle drag\n   */\n  onEndDrag = e => {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.el.classList.remove(this.classNames.dragging);\n\n    elDocument.removeEventListener('mousemove', this.drag, true);\n    elDocument.removeEventListener('mouseup', this.onEndDrag, true);\n    this.removePreventClickId = elWindow.setTimeout(() => {\n      // Remove these asynchronously so we still suppress click events\n      // generated simultaneously with mouseup.\n      elDocument.removeEventListener('click', this.preventClick, true);\n      elDocument.removeEventListener('dblclick', this.preventClick, true);\n      this.removePreventClickId = null;\n    });\n  };\n\n  /**\n   * Handler to ignore click events during drag\n   */\n  preventClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  onTrackClick(e, axis = 'y') {\n    if (!this.options.clickOnTrack) return;\n\n    const elWindow = getElementWindow(this.el);\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n    const scrollbar = this.axis[axis].scrollbar;\n    const scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    let scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    const t =\n      axis === 'y'\n        ? this.mouseY - scrollbarOffset\n        : this.mouseX - scrollbarOffset;\n    const dir = t < 0 ? -1 : 1;\n    const scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n\n    const scrollTo = () => {\n      if (dir === -1) {\n        if (scrolled > scrollSize) {\n          scrolled -= this.options.clickOnTrackSpeed;\n          this.contentWrapperEl.scrollTo({\n            [this.axis[axis].offsetAttr]: scrolled\n          });\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      } else {\n        if (scrolled < scrollSize) {\n          scrolled += this.options.clickOnTrackSpeed;\n          this.contentWrapperEl.scrollTo({\n            [this.axis[axis].offsetAttr]: scrolled\n          });\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      }\n    };\n\n    scrollTo();\n  }\n\n  /**\n   * Getter for content element\n   */\n  getContentElement() {\n    return this.contentEl;\n  }\n\n  /**\n   * Getter for original scrolling element\n   */\n  getScrollElement() {\n    return this.contentWrapperEl;\n  }\n\n  getScrollbarWidth() {\n    // Try/catch for FF 56 throwing on undefined computedStyles\n    try {\n      // Detect browsers supporting CSS scrollbar styling and do not calculate\n      if (\n        getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar')\n          .display === 'none' ||\n        'scrollbarWidth' in document.documentElement.style ||\n        '-ms-overflow-style' in document.documentElement.style\n      ) {\n        return 0;\n      } else {\n        return scrollbarWidth(this.el);\n      }\n    } catch (e) {\n      return scrollbarWidth(this.el);\n    }\n  }\n\n  removeListeners() {\n    const elWindow = getElementWindow(this.el);\n    // Event listeners\n    if (this.options.autoHide) {\n      this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n\n    if (this.contentWrapperEl) {\n      this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    }\n\n    elWindow.removeEventListener('resize', this.onWindowResize);\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Cancel all debounced functions\n    this.recalculate.cancel();\n    this.onMouseMove.cancel();\n    this.hideScrollbars.cancel();\n    this.onWindowResize.cancel();\n  }\n\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  unMount() {\n    this.removeListeners();\n    SimpleBar.instances.delete(this.el);\n  }\n\n  /**\n   * Check if mouse is within bounds\n   */\n  isWithinBounds(bbox) {\n    return (\n      this.mouseX >= bbox.left &&\n      this.mouseX <= bbox.left + bbox.width &&\n      this.mouseY >= bbox.top &&\n      this.mouseY <= bbox.top + bbox.height\n    );\n  }\n\n  /**\n   * Find element children matches query\n   */\n  findChild(el, query) {\n    const matches =\n      el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, child =>\n      matches.call(child, query)\n    )[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}