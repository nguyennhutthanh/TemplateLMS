{"ast":null,"code":"import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n/**\n * @displayName Dropdown\n */\n\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      _ref$itemSelector = _ref.itemSelector,\n      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n  var forceUpdate = useForceUpdate();\n\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n      show = _useUncontrolledProp[0],\n      onToggle = _useUncontrolledProp[1];\n\n  var _useCallbackRef = useCallbackRef(),\n      toggleElement = _useCallbackRef[0],\n      setToggle = _useCallbackRef[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var menuRef = useRef(null);\n  var menuElement = menuRef.current;\n  var setMenu = useCallback(function (ref) {\n    menuRef.current = ref; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (event) {\n    onToggle(!show, event);\n  }, [onToggle, show]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key;\n    var target = event.target; // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && menuRef.current && menuRef.current.contains(target))) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          toggle(event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Escape':\n      case 'Tab':\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children({\n    props: {\n      onKeyDown: handleKeyDown\n    }\n  }));\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;","map":{"version":3,"names":["matches","qsa","React","useCallback","useRef","useEffect","useMemo","PropTypes","useUncontrolledProp","usePrevious","useCallbackRef","useForceUpdate","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","propTypes","children","func","isRequired","drop","oneOf","focusFirstItemOnShow","itemSelector","string","alignEnd","bool","show","defaultShow","onToggle","Dropdown","_ref","rawShow","rawOnToggle","_ref$itemSelector","forceUpdate","_useUncontrolledProp","_useCallbackRef","toggleElement","setToggle","menuRef","menuElement","current","setMenu","ref","lastShow","lastSourceEvent","focusInDropdown","toggle","event","context","contains","document","activeElement","focusToggle","focus","maybeFocusFirst","type","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","handleKeyDown","key","target","isInput","tagName","next","preventDefault","_next","createElement","Provider","value","props","onKeyDown","displayName","Menu","Toggle"],"sources":["D:/PRoject LMS/reactapp-main/node_modules/react-overlays/esm/Dropdown.js"],"sourcesContent":["import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n\n/**\n * @displayName Dropdown\n */\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      _ref$itemSelector = _ref.itemSelector,\n      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n  var forceUpdate = useForceUpdate();\n\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n      show = _useUncontrolledProp[0],\n      onToggle = _useUncontrolledProp[1];\n\n  var _useCallbackRef = useCallbackRef(),\n      toggleElement = _useCallbackRef[0],\n      setToggle = _useCallbackRef[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var menuRef = useRef(null);\n  var menuElement = menuRef.current;\n  var setMenu = useCallback(function (ref) {\n    menuRef.current = ref; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (event) {\n    onToggle(!show, event);\n  }, [onToggle, show]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key;\n    var target = event.target; // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && menuRef.current && menuRef.current.contains(target))) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          toggle(event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Escape':\n      case 'Tab':\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children({\n    props: {\n      onKeyDown: handleKeyDown\n    }\n  }));\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;"],"mappings":"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"},"metadata":{},"sourceType":"module"}