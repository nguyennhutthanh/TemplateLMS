{"ast":null,"code":"/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\nvar Prism = function () {\n  // Private helper vars\n  var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n  var uniqueId = 0; // The grammar object for plaintext\n\n  var plainTextGrammar = {};\n  var _ = {\n    /**\n     * A namespace for utility methods.\n     *\n     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n     * change or disappear at any time.\n     *\n     * @namespace\n     * @memberof Prism\n     */\n    util: {\n      encode: function encode(tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, encode(tokens.content), tokens.alias);\n        } else if (Array.isArray(tokens)) {\n          return tokens.map(encode);\n        } else {\n          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n        }\n      },\n\n      /**\n       * Returns the name of the type of the given value.\n       *\n       * @param {any} o\n       * @returns {string}\n       * @example\n       * type(null)      === 'Null'\n       * type(undefined) === 'Undefined'\n       * type(123)       === 'Number'\n       * type('foo')     === 'String'\n       * type(true)      === 'Boolean'\n       * type([1, 2])    === 'Array'\n       * type({})        === 'Object'\n       * type(String)    === 'Function'\n       * type(/abc+/)    === 'RegExp'\n       */\n      type: function type(o) {\n        return Object.prototype.toString.call(o).slice(8, -1);\n      },\n\n      /**\n       * Returns a unique number for the given object. Later calls will still return the same number.\n       *\n       * @param {Object} obj\n       * @returns {number}\n       */\n      objId: function objId(obj) {\n        if (!obj['__id']) {\n          Object.defineProperty(obj, '__id', {\n            value: ++uniqueId\n          });\n        }\n\n        return obj['__id'];\n      },\n\n      /**\n       * Creates a deep clone of the given object.\n       *\n       * The main intended use of this function is to clone language definitions.\n       *\n       * @param {T} o\n       * @param {Record<number, any>} [visited]\n       * @returns {T}\n       * @template T\n       */\n      clone: function deepClone(o, visited) {\n        visited = visited || {};\n        var clone;\n        var id;\n\n        switch (_.util.type(o)) {\n          case 'Object':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone =\n            /** @type {Record<string, any>} */\n            {};\n            visited[id] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = deepClone(o[key], visited);\n              }\n            }\n\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          case 'Array':\n            id = _.util.objId(o);\n\n            if (visited[id]) {\n              return visited[id];\n            }\n\n            clone = [];\n            visited[id] = clone;\n\n            /** @type {Array} */\n\n            /** @type {any} */\n            o.forEach(function (v, i) {\n              clone[i] = deepClone(v, visited);\n            });\n            return (\n              /** @type {any} */\n              clone\n            );\n\n          default:\n            return o;\n        }\n      },\n\n      /**\n       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n       *\n       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n       *\n       * @param {Element} element\n       * @returns {string}\n       */\n      getLanguage: function getLanguage(element) {\n        while (element) {\n          var m = lang.exec(element.className);\n\n          if (m) {\n            return m[1].toLowerCase();\n          }\n\n          element = element.parentElement;\n        }\n\n        return 'none';\n      },\n\n      /**\n       * Sets the Prism `language-xxxx` class of the given element.\n       *\n       * @param {Element} element\n       * @param {string} language\n       * @returns {void}\n       */\n      setLanguage: function setLanguage(element, language) {\n        // remove all `language-xxxx` classes\n        // (this might leave behind a leading space)\n        element.className = element.className.replace(RegExp(lang, 'gi'), ''); // add the new `language-xxxx` class\n        // (using `classList` will automatically clean up spaces for us)\n\n        element.classList.add('language-' + language);\n      },\n\n      /**\n       * Returns whether a given class is active for `element`.\n       *\n       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n       * given class is just the given class with a `no-` prefix.\n       *\n       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n       * ancestors have the given class or the negated version of it, then the default activation will be returned.\n       *\n       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n       * version of it, the class is considered active.\n       *\n       * @param {Element} element\n       * @param {string} className\n       * @param {boolean} [defaultActivation=false]\n       * @returns {boolean}\n       */\n      isActive: function isActive(element, className, defaultActivation) {\n        var no = 'no-' + className;\n\n        while (element) {\n          var classList = element.classList;\n\n          if (classList.contains(className)) {\n            return true;\n          }\n\n          if (classList.contains(no)) {\n            return false;\n          }\n\n          element = element.parentElement;\n        }\n\n        return !!defaultActivation;\n      }\n    },\n\n    /**\n     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n     *\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    languages: {\n      /**\n       * The grammar for plain, unformatted text.\n       */\n      plain: plainTextGrammar,\n      plaintext: plainTextGrammar,\n      text: plainTextGrammar,\n      txt: plainTextGrammar,\n\n      /**\n       * Creates a deep copy of the language with the given id and appends the given tokens.\n       *\n       * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n       * will be overwritten at its original position.\n       *\n       * ## Best practices\n       *\n       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n       * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n       *\n       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n       *\n       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n       * @param {Grammar} redef The new tokens to append.\n       * @returns {Grammar} The new language created.\n       * @public\n       * @example\n       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n       *     // at its original position\n       *     'comment': { ... },\n       *     // CSS doesn't have a 'color' token, so this token will be appended\n       *     'color': /\\b(?:red|green|blue)\\b/\n       * });\n       */\n      extend: function extend(id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\n       * Inserts tokens _before_ another token in a language definition or any other grammar.\n       *\n       * ## Usage\n       *\n       * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n       * this:\n       *\n       * ```js\n       * Prism.languages.markup.style = {\n       *     // token\n       * };\n       * ```\n       *\n       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n       * before existing tokens. For the CSS example above, you would use it like this:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'cdata', {\n       *     'style': {\n       *         // token\n       *     }\n       * });\n       * ```\n       *\n       * ## Special cases\n       *\n       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n       * will be ignored.\n       *\n       * This behavior can be used to insert tokens after `before`:\n       *\n       * ```js\n       * Prism.languages.insertBefore('markup', 'comment', {\n       *     'comment': Prism.languages.markup.comment,\n       *     // tokens after 'comment'\n       * });\n       * ```\n       *\n       * ## Limitations\n       *\n       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n       * deleting properties which is necessary to insert at arbitrary positions.\n       *\n       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n       * Instead, it will create a new object and replace all references to the target object with the new one. This\n       * can be done without temporarily deleting properties, so the iteration order is well-defined.\n       *\n       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n       * you hold the target object in a variable, then the value of the variable will not change.\n       *\n       * ```js\n       * var oldMarkup = Prism.languages.markup;\n       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n       *\n       * assert(oldMarkup !== Prism.languages.markup);\n       * assert(newMarkup === Prism.languages.markup);\n       * ```\n       *\n       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n       * object to be modified.\n       * @param {string} before The key to insert before.\n       * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n       * object to be modified.\n       *\n       * Defaults to `Prism.languages`.\n       * @returns {Grammar} The new grammar object.\n       * @public\n       */\n      insertBefore: function insertBefore(inside, before, insert, root) {\n        root = root ||\n        /** @type {any} */\n        _.languages;\n        var grammar = root[inside];\n        /** @type {Grammar} */\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            } // Do not insert token which also occur in insert. See #1525\n\n\n            if (!insert.hasOwnProperty(token)) {\n              ret[token] = grammar[token];\n            }\n          }\n        }\n\n        var old = root[inside];\n        root[inside] = ret; // Update references in other language definitions\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === old && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function DFS(o, callback, type, visited) {\n        visited = visited || {};\n        var objId = _.util.objId;\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n            var property = o[i];\n\n            var propertyType = _.util.type(property);\n\n            if (propertyType === 'Object' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, null, visited);\n            } else if (propertyType === 'Array' && !visited[objId(property)]) {\n              visited[objId(property)] = true;\n              DFS(property, callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n\n    /**\n     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n     * and the language definitions to use, and returns a string with the HTML produced.\n     *\n     * The following hooks will be run:\n     * 1. `before-tokenize`\n     * 2. `after-tokenize`\n     * 3. `wrap`: On each {@link Token}.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @param {string} language The name of the language definition passed to `grammar`.\n     * @returns {string} The highlighted HTML.\n     * @memberof Prism\n     * @public\n     * @example\n     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n     */\n    highlight: function highlight(text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n\n      _.hooks.run('before-tokenize', env);\n\n      env.tokens = _.tokenize(env.code, env.grammar);\n\n      _.hooks.run('after-tokenize', env);\n\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n\n    /**\n     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n     * and the language definitions to use, and returns an array with the tokenized code.\n     *\n     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n     *\n     * This method could be useful in other contexts as well, as a very crude parser.\n     *\n     * @param {string} text A string with the code to be highlighted.\n     * @param {Grammar} grammar An object containing the tokens to use.\n     *\n     * Usually a language definition like `Prism.languages.markup`.\n     * @returns {TokenStream} An array of strings and tokens, a token stream.\n     * @memberof Prism\n     * @public\n     * @example\n     * let code = `var foo = 0;`;\n     * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n     * tokens.forEach(token => {\n     *     if (token instanceof Prism.Token && token.type === 'number') {\n     *         console.log(`Found numeric literal: ${token.content}`);\n     *     }\n     * });\n     */\n    tokenize: function tokenize(text, grammar) {\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      var tokenList = new LinkedList();\n      addAfter(tokenList, tokenList.head, text);\n      matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n      return toArray(tokenList);\n    },\n\n    /**\n     * @namespace\n     * @memberof Prism\n     * @public\n     */\n    hooks: {\n      all: {},\n\n      /**\n       * Adds the given callback to the list of callbacks for the given hook.\n       *\n       * The callback will be invoked when the hook it is registered for is run.\n       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n       *\n       * One callback function can be registered to multiple hooks and the same hook multiple times.\n       *\n       * @param {string} name The name of the hook.\n       * @param {HookCallback} callback The callback function which is given environment variables.\n       * @public\n       */\n      add: function add(name, callback) {\n        var hooks = _.hooks.all;\n        hooks[name] = hooks[name] || [];\n        hooks[name].push(callback);\n      },\n\n      /**\n       * Runs a hook invoking all registered callbacks with the given environment variables.\n       *\n       * Callbacks will be invoked synchronously and in the order in which they were registered.\n       *\n       * @param {string} name The name of the hook.\n       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n       * @public\n       */\n      run: function run(name, env) {\n        var callbacks = _.hooks.all[name];\n\n        if (!callbacks || !callbacks.length) {\n          return;\n        }\n\n        for (var i = 0, callback; callback = callbacks[i++];) {\n          callback(env);\n        }\n      }\n    },\n    Token: Token\n  }; // Typescript note:\n  // The following can be used to import the Token type in JSDoc:\n  //\n  //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n  /**\n   * Creates a new token.\n   *\n   * @param {string} type See {@link Token#type type}\n   * @param {string | TokenStream} content See {@link Token#content content}\n   * @param {string|string[]} [alias] The alias(es) of the token.\n   * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n   * @class\n   * @global\n   * @public\n   */\n\n  function Token(type, content, alias, matchedStr) {\n    /**\n     * The type of the token.\n     *\n     * This is usually the key of a pattern in a {@link Grammar}.\n     *\n     * @type {string}\n     * @see GrammarToken\n     * @public\n     */\n    this.type = type;\n    /**\n     * The strings or tokens contained by this token.\n     *\n     * This will be a token stream if the pattern matched also defined an `inside` grammar.\n     *\n     * @type {string | TokenStream}\n     * @public\n     */\n\n    this.content = content;\n    /**\n     * The alias(es) of the token.\n     *\n     * @type {string|string[]}\n     * @see GrammarToken\n     * @public\n     */\n\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || '').length | 0;\n  }\n  /**\n   * A token stream is an array of strings and {@link Token Token} objects.\n   *\n   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n   * them.\n   *\n   * 1. No adjacent strings.\n   * 2. No empty strings.\n   *\n   *    The only exception here is the token stream that only contains the empty string and nothing else.\n   *\n   * @typedef {Array<string | Token>} TokenStream\n   * @global\n   * @public\n   */\n\n  /**\n   * Converts the given token or token stream to an HTML representation.\n   *\n   * The following hooks will be run:\n   * 1. `wrap`: On each {@link Token}.\n   *\n   * @param {string | Token | TokenStream} o The token or token stream to be converted.\n   * @param {string} language The name of current language.\n   * @returns {string} The HTML representation of the token or token stream.\n   * @memberof Token\n   * @static\n   */\n\n\n  Token.stringify = function stringify(o, language) {\n    if (typeof o == 'string') {\n      return o;\n    }\n\n    if (Array.isArray(o)) {\n      var s = '';\n      o.forEach(function (e) {\n        s += stringify(e, language);\n      });\n      return s;\n    }\n\n    var env = {\n      type: o.type,\n      content: stringify(o.content, language),\n      tag: 'span',\n      classes: ['token', o.type],\n      attributes: {},\n      language: language\n    };\n    var aliases = o.alias;\n\n    if (aliases) {\n      if (Array.isArray(aliases)) {\n        Array.prototype.push.apply(env.classes, aliases);\n      } else {\n        env.classes.push(aliases);\n      }\n    }\n\n    _.hooks.run('wrap', env);\n\n    var attributes = '';\n\n    for (var name in env.attributes) {\n      attributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n    }\n\n    return '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n  };\n  /**\n   * @param {RegExp} pattern\n   * @param {number} pos\n   * @param {string} text\n   * @param {boolean} lookbehind\n   * @returns {RegExpExecArray | null}\n   */\n\n\n  function matchPattern(pattern, pos, text, lookbehind) {\n    pattern.lastIndex = pos;\n    var match = pattern.exec(text);\n\n    if (match && lookbehind && match[1]) {\n      // change the match to remove the text matched by the Prism lookbehind group\n      var lookbehindLength = match[1].length;\n      match.index += lookbehindLength;\n      match[0] = match[0].slice(lookbehindLength);\n    }\n\n    return match;\n  }\n  /**\n   * @param {string} text\n   * @param {LinkedList<string | Token>} tokenList\n   * @param {any} grammar\n   * @param {LinkedListNode<string | Token>} startNode\n   * @param {number} startPos\n   * @param {RematchOptions} [rematch]\n   * @returns {void}\n   * @private\n   *\n   * @typedef RematchOptions\n   * @property {string} cause\n   * @property {number} reach\n   */\n\n\n  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n    for (var token in grammar) {\n      if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n        continue;\n      }\n\n      var patterns = grammar[token];\n      patterns = Array.isArray(patterns) ? patterns : [patterns];\n\n      for (var j = 0; j < patterns.length; ++j) {\n        if (rematch && rematch.cause == token + ',' + j) {\n          return;\n        }\n\n        var patternObj = patterns[j];\n        var inside = patternObj.inside;\n        var lookbehind = !!patternObj.lookbehind;\n        var greedy = !!patternObj.greedy;\n        var alias = patternObj.alias;\n\n        if (greedy && !patternObj.pattern.global) {\n          // Without the global flag, lastIndex won't work\n          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n        }\n        /** @type {RegExp} */\n\n\n        var pattern = patternObj.pattern || patternObj;\n\n        for ( // iterate the token list and keep track of the current token/string position\n        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {\n          if (rematch && pos >= rematch.reach) {\n            break;\n          }\n\n          var str = currentNode.value;\n\n          if (tokenList.length > text.length) {\n            // Something went terribly wrong, ABORT, ABORT!\n            return;\n          }\n\n          if (str instanceof Token) {\n            continue;\n          }\n\n          var removeCount = 1; // this is the to parameter of removeBetween\n\n          var match;\n\n          if (greedy) {\n            match = matchPattern(pattern, pos, text, lookbehind);\n\n            if (!match || match.index >= text.length) {\n              break;\n            }\n\n            var from = match.index;\n            var to = match.index + match[0].length;\n            var p = pos; // find the node that contains the match\n\n            p += currentNode.value.length;\n\n            while (from >= p) {\n              currentNode = currentNode.next;\n              p += currentNode.value.length;\n            } // adjust pos (and p)\n\n\n            p -= currentNode.value.length;\n            pos = p; // the current node is a Token, then the match starts inside another Token, which is invalid\n\n            if (currentNode.value instanceof Token) {\n              continue;\n            } // find the last node which is affected by this match\n\n\n            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {\n              removeCount++;\n              p += k.value.length;\n            }\n\n            removeCount--; // replace with the new match\n\n            str = text.slice(pos, p);\n            match.index -= pos;\n          } else {\n            match = matchPattern(pattern, 0, str, lookbehind);\n\n            if (!match) {\n              continue;\n            }\n          } // eslint-disable-next-line no-redeclare\n\n\n          var from = match.index;\n          var matchStr = match[0];\n          var before = str.slice(0, from);\n          var after = str.slice(from + matchStr.length);\n          var reach = pos + str.length;\n\n          if (rematch && reach > rematch.reach) {\n            rematch.reach = reach;\n          }\n\n          var removeFrom = currentNode.prev;\n\n          if (before) {\n            removeFrom = addAfter(tokenList, removeFrom, before);\n            pos += before.length;\n          }\n\n          removeRange(tokenList, removeFrom, removeCount);\n          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n          currentNode = addAfter(tokenList, removeFrom, wrapped);\n\n          if (after) {\n            addAfter(tokenList, currentNode, after);\n          }\n\n          if (removeCount > 1) {\n            // at least one Token object was removed, so we have to do some rematching\n            // this can only happen if the current pattern is greedy\n\n            /** @type {RematchOptions} */\n            var nestedRematch = {\n              cause: token + ',' + j,\n              reach: reach\n            };\n            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch); // the reach might have been extended because of the rematching\n\n            if (rematch && nestedRematch.reach > rematch.reach) {\n              rematch.reach = nestedRematch.reach;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @typedef LinkedListNode\n   * @property {T} value\n   * @property {LinkedListNode<T> | null} prev The previous node.\n   * @property {LinkedListNode<T> | null} next The next node.\n   * @template T\n   * @private\n   */\n\n  /**\n   * @template T\n   * @private\n   */\n\n\n  function LinkedList() {\n    /** @type {LinkedListNode<T>} */\n    var head = {\n      value: null,\n      prev: null,\n      next: null\n    };\n    /** @type {LinkedListNode<T>} */\n\n    var tail = {\n      value: null,\n      prev: head,\n      next: null\n    };\n    head.next = tail;\n    /** @type {LinkedListNode<T>} */\n\n    this.head = head;\n    /** @type {LinkedListNode<T>} */\n\n    this.tail = tail;\n    this.length = 0;\n  }\n  /**\n   * Adds a new node with the given value to the list.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {T} value\n   * @returns {LinkedListNode<T>} The added node.\n   * @template T\n   */\n\n\n  function addAfter(list, node, value) {\n    // assumes that node != list.tail && values.length >= 0\n    var next = node.next;\n    var newNode = {\n      value: value,\n      prev: node,\n      next: next\n    };\n    node.next = newNode;\n    next.prev = newNode;\n    list.length++;\n    return newNode;\n  }\n  /**\n   * Removes `count` nodes after the given node. The given node will not be removed.\n   *\n   * @param {LinkedList<T>} list\n   * @param {LinkedListNode<T>} node\n   * @param {number} count\n   * @template T\n   */\n\n\n  function removeRange(list, node, count) {\n    var next = node.next;\n\n    for (var i = 0; i < count && next !== list.tail; i++) {\n      next = next.next;\n    }\n\n    node.next = next;\n    next.prev = node;\n    list.length -= i;\n  }\n  /**\n   * @param {LinkedList<T>} list\n   * @returns {T[]}\n   * @template T\n   */\n\n\n  function toArray(list) {\n    var array = [];\n    var node = list.head.next;\n\n    while (node !== list.tail) {\n      array.push(node.value);\n      node = node.next;\n    }\n\n    return array;\n  }\n\n  return _;\n}();\n\nvar prism = Prism;\nPrism.default = Prism;\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function value(attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */\n\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */\n\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */\n\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function stringifyToken(token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function walkTokens(tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function value(env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function value(env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n              walkTokens(token.content);\n            }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\nexport default prism;","map":{"version":3,"names":["Prism","lang","uniqueId","plainTextGrammar","_","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlight","env","code","hooks","run","tokenize","stringify","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","name","push","callbacks","length","matchedStr","s","e","tag","classes","attributes","aliases","apply","join","matchPattern","pattern","pos","lookbehind","lastIndex","match","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","source","currentNode","next","tail","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","count","array","prism","default","markup","addInlined","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","entity","variable","toBeCopied","shell","clike","c","keyword","modName","cpp","string","css","addAttribute","selectorInside","selector","unit","number","javascript","regex","js","comment","interpolation","coffeescript","coffee","anchorOrAlias","properties","plainKey","createValuePattern","yaml","yml","inner","createInline","tableCell","tableRow","tableLine","markdown","punctuation","walkTokens","l","codeLang","codeBlock","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","tagPattern","KNOWN_ENTITY_NAMES","fromCodePoint","String","fromCharCode","parseInt","Number","known","md","graphql","afterTokenizeGraphql","validTokens","filter","currentIndex","getToken","offset","isTokenType","types","findClosingBracket","open","close","stackHeight","test","addAlias","startToken","inputVariables","definitionEnd","t","mutationEnd","varToken","indexOf","sql","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","undefined","Boolean","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","tokenizeInterpolationExpression","expression","tempGrammar","args","splice","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedCode","interpolationExpression","placeholder","embeddedTokens","placeholders","keys","substring","middle","replacement","afterTokens","concat","supportedLanguages","findTemplateStrings","embedded","stringContent","typescript","typeInside","ts","withId","unshift","maybeClassNameTokens","space","braces","spread","re","jsx","stringifyToken","openedTags","notTagNorBrace","pop","openedBraces","plainText","diff","PREFIXES","prefix","git","go","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","tokenizePlaceholders","handlebars","handlebarsPattern","hbs","json","webmanifest","less","makefile","objectivec","objc","ocaml","python","py","reason","function","sass","atrule","operator","important","scss","stylus","func","tsx","wasm"],"sources":["E:/ReactJS/project-cursus/node_modules/prism-react-renderer/prism/index.js"],"sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\n\n var Prism = (function () {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\treturn _;\n\n}());\n\nvar prism = Prism;\nPrism.default = Prism;\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function (attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */\n\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */\n\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */\n\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n\nexport default prism;\n"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGqD,MAAM,EAAE,gBAAU3B,EAAV,EAAc4B,KAAd,EAAqB;QAC5B,IAAIxD,IAAI,GAAGG,CAAC,CAACC,IAAF,CAAOqB,KAAP,CAAatB,CAAC,CAAC+C,SAAF,CAAYtB,EAAZ,CAAb,CAAX;;QAEA,KAAK,IAAIC,GAAT,IAAgB2B,KAAhB,EAAuB;UACtBxD,IAAI,CAAC6B,GAAD,CAAJ,GAAY2B,KAAK,CAAC3B,GAAD,CAAjB;QACA;;QAED,OAAO7B,IAAP;MACA,CA7CS;;MA+CV;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACGyD,YAAY,EAAE,sBAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;QACrDA,IAAI,GAAGA,IAAI;QAAI;QAAoB1D,CAAC,CAAC+C,SAArC;QACA,IAAIY,OAAO,GAAGD,IAAI,CAACH,MAAD,CAAlB;QACA;;QACA,IAAIK,GAAG,GAAG,EAAV;;QAEA,KAAK,IAAIC,KAAT,IAAkBF,OAAlB,EAA2B;UAC1B,IAAIA,OAAO,CAAChC,cAAR,CAAuBkC,KAAvB,CAAJ,EAAmC;YAElC,IAAIA,KAAK,IAAIL,MAAb,EAAqB;cACpB,KAAK,IAAIM,QAAT,IAAqBL,MAArB,EAA6B;gBAC5B,IAAIA,MAAM,CAAC9B,cAAP,CAAsBmC,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"},"metadata":{},"sourceType":"module"}