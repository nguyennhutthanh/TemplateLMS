{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ShadowFire\\\\Downloads\\\\volt-react-dashboard-master\\\\volt-react-dashboard-master\\\\src\\\\components\\\\Code.js\";\nimport React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Card, Button, Tooltip, OverlayTrigger } from '@themesberg/react-bootstrap';\nimport Highlight, { Prism } from 'prism-react-renderer';\nimport themeStyle from \"../assets/syntax-themes/ghcolors.json\";\nexport default (props => {\n  const {\n    code = \"\",\n    language = \"jsx\"\n  } = props;\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const CodeStyling = _ref => {\n    let {\n      className,\n      style,\n      tokens,\n      getLineProps,\n      getTokenProps\n    } = _ref;\n    return /*#__PURE__*/React.createElement(Card, {\n      className: \"position-relative pe-8 mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"pre\", {\n      className: className,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, tokens.map((line, i) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getLineProps({\n      line,\n      key: i\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }), line.map((token, key) => /*#__PURE__*/React.createElement(\"span\", Object.assign({}, getTokenProps({\n      token,\n      key\n    }), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 41\n      }\n    })))))), copied ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"text-success copy-code-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 19\n      }\n    }, \"Copied\") : null, /*#__PURE__*/React.createElement(OverlayTrigger, {\n      trigger: ['hover', 'focus'],\n      placement: \"top\",\n      overlay: /*#__PURE__*/React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 20\n        }\n      }, \"Copy to clipboard\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CopyToClipboard, {\n      text: code,\n      onCopy: handleCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"primary\",\n      className: \"copy-code-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, \"Copy\")))));\n  };\n\n  return /*#__PURE__*/React.createElement(Highlight, {\n    Prism: Prism,\n    code: code,\n    language: language,\n    theme: themeStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, CodeStyling);\n});","map":{"version":3,"sources":["C:/Users/ShadowFire/Downloads/volt-react-dashboard-master/volt-react-dashboard-master/src/components/Code.js"],"names":["React","useState","CopyToClipboard","Card","Button","Tooltip","OverlayTrigger","Highlight","Prism","themeStyle","props","code","language","copied","setCopied","handleCopy","setTimeout","CodeStyling","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,cAAhC,QAAsD,6BAAtD;AACA,OAAOC,SAAP,IAAoBC,KAApB,QAAiC,sBAAjC;AAEA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,gBAAgBC,KAAD,IAAW;AACxB,QAAM;AAAEC,IAAAA,IAAI,GAAG,EAAT;AAAaC,IAAAA,QAAQ,GAAG;AAAxB,MAAkCF,KAAxC;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMc,UAAU,GAAG,MAAM;AACvBD,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,MAAMF,SAAS,CAAC,KAAD,CAAhB,EAAyB,IAAzB,CAAV;AACD,GAHD;;AAKA,QAAMG,WAAW,GAAG;AAAA,QAAC;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA,MAApB;AAA4BC,MAAAA,YAA5B;AAA0CC,MAAAA;AAA1C,KAAD;AAAA,wBAClB,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,6BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAEJ,SAAhB;AAA2B,MAAA,KAAK,EAAEC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,MAAM,CAACG,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,kBACV,6CAASJ,YAAY,CAAC;AAAEG,MAAAA,IAAF;AAAQE,MAAAA,GAAG,EAAED;AAAb,KAAD,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGD,IAAI,CAACD,GAAL,CAAS,CAACI,KAAD,EAAQD,GAAR,kBAAgB,8CAAUJ,aAAa,CAAC;AAAEK,MAAAA,KAAF;AAASD,MAAAA;AAAT,KAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzB,CADH,CADD,CADH,CADF,EASGb,MAAM,gBAAG;AAAM,MAAA,SAAS,EAAC,6BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAiE,IAT1E,eAWE,oBAAC,cAAD;AACE,MAAA,OAAO,EAAE,CAAC,OAAD,EAAU,OAAV,CADX;AAEE,MAAA,SAAS,EAAC,KAFZ;AAGE,MAAA,OAAO,eAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAEF,IAAvB;AAA6B,MAAA,MAAM,EAAEI,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,IAAb;AAAkB,MAAA,OAAO,EAAC,SAA1B;AAAoC,MAAA,SAAS,EAAC,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CALF,CAXF,CADF,CADkB;AAAA,GAApB;;AA0BA,sBACE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEP,KAAlB;AAAyB,IAAA,IAAI,EAAEG,IAA/B;AAAqC,IAAA,QAAQ,EAAEC,QAA/C;AAAyD,IAAA,KAAK,EAAEH,UAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,WADH,CADF;AAKD,CAxCD","sourcesContent":["\nimport React, { useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Card, Button, Tooltip, OverlayTrigger } from '@themesberg/react-bootstrap';\nimport Highlight, { Prism } from 'prism-react-renderer';\n\nimport themeStyle from \"../assets/syntax-themes/ghcolors.json\";\n\nexport default (props) => {\n  const { code = \"\", language = \"jsx\" } = props;\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const CodeStyling = ({ className, style, tokens, getLineProps, getTokenProps }) => (\n    <Card className=\"position-relative pe-8 mb-2\">\n      <Card.Body>\n        <pre className={className} style={style}>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => <span {...getTokenProps({ token, key })} />)}\n            </div>\n          ))}\n        </pre>\n\n        {copied ? <span className=\"text-success copy-code-text\">Copied</span> : null}\n\n        <OverlayTrigger\n          trigger={['hover', 'focus']}\n          placement=\"top\"\n          overlay={<Tooltip>Copy to clipboard</Tooltip>}\n        >\n          <CopyToClipboard text={code} onCopy={handleCopy}>\n            <Button size=\"sm\" variant=\"primary\" className=\"copy-code-button\">Copy</Button>\n          </CopyToClipboard>\n        </OverlayTrigger>\n      </Card.Body>\n    </Card>\n  );\n\n  return (\n    <Highlight Prism={Prism} code={code} language={language} theme={themeStyle}>\n      {CodeStyling}\n    </Highlight>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}